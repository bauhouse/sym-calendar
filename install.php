<?php

	header('Expires: Mon, 12 Dec 1982 06:14:00 GMT');
	header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
	header('Cache-Control: no-cache, must-revalidate, max-age=0');
	header('Pragma: no-cache');

	function __errorHandler($errno=NULL, $errstr, $errfile=NULL, $errline=NULL, $errcontext=NULL){
		return;
	}

	error_reporting(E_ALL ^ E_NOTICE);
	set_error_handler('__errorHandler');

	define('kBUILD', '515');
	define('kVERSION', '2.0.3');
	define('kINSTALL_ASSET_LOCATION', './symphony/assets/installer');	
	define('kINSTALL_FILENAME', basename(__FILE__));
	
	## Show PHP Info
	if(isset($_REQUEST['info'])){
		phpinfo(); 
		exit();
	}
	
	function setLanguage() {
		require_once('symphony/lib/toolkit/class.lang.php');
		$lang = NULL;

		if(!empty($_REQUEST['lang'])){
			$l = preg_replace('/[^a-zA-Z\-]/', '', $_REQUEST['lang']);
			if(file_exists("./symphony/lib/lang/lang.{$l}.php")) $lang = $l;
		}

		if($lang === NULL){
			foreach(Lang::getBrowserLanguages() as $l){
				if(file_exists("./symphony/lib/lang/lang.{$l}.php")) $lang = $l;
				break;
			}
		}

		## none of browser accepted languages is available, get first available
		if($lang === NULL){
			## default to English
			if(file_exists('./symphony/lib/lang/lang.en.php')) $lang = 'en';
			else{
				$l = Lang::getAvailableLanguages();
				if(is_array($l) && count($l) > 0) $lang = $l[0];
			}
		}

		if($lang === NULL) return NULL;

		try{
			Lang::init('./symphony/lib/lang/lang.%s.php', $lang);
		}
		catch(Exception $s){
			return NULL;
		}

		define('__LANG__', $lang);
		return $lang;
	}

	
	/***********************
	         TESTS
	************************/

	// Check for PHP 5.1+

	if(version_compare(phpversion(), '5.1.3', '<=')){

		$code = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>Outstanding Requirements</title>
		<link rel="stylesheet" type="text/css" href="'.kINSTALL_ASSET_LOCATION.'/main.css"/>
		<script type="text/javascript" src="'.kINSTALL_ASSET_LOCATION.'/main.js"></script>
	</head>
		<body>
			<h1>Install Symphony <em>Version '.kVERSION.'</em></h1>
			<h2>Outstanding Requirements</h2>
			<p>Symphony needs the following requirements satisfied before installation can proceed.</p>

			<dl>
				<dt><abbr title="PHP: Hypertext Pre-processor">PHP</abbr> 5.1.3 or above</dt>
				<dd>Symphony needs a recent version of <abbr title="PHP: Hypertext Pre-processor">PHP</abbr>.</dd>
			</dl>

		</body>

</html>';

		die($code);

	}

	// Check and set language
	if(setLanguage() === NULL){

		$code = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>Outstanding Requirements</title>
		<link rel="stylesheet" type="text/css" href="'.kINSTALL_ASSET_LOCATION.'/main.css"/>
		<script type="text/javascript" src="'.kINSTALL_ASSET_LOCATION.'/main.js"></script>
	</head>
		<body>
			<h1>Install Symphony <em>Version '.kVERSION.'</em></h1>
			<h2>Outstanding Requirements</h2>
			<p>Symphony needs at least one language file to be present before installation can proceed.</p>

		</body>

</html>';

		die($code);

	}

	// Check if Symphony is already installed

	if(file_exists('manifest/config.php')){

		$code = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>'.__('Existing Installation').'</title>
		<link rel="stylesheet" type="text/css" href="'.kINSTALL_ASSET_LOCATION.'/main.css"/>
		<script type="text/javascript" src="'.kINSTALL_ASSET_LOCATION.'/main.js"></script>
	</head>
		<body>
			<h1>'.__('Install Symphony <em>Version %s</em>', array(kVERSION)).'</h1>
			<h2>'.__('Existing Installation').'</h2>
			<p>'.__('It appears that Symphony has already been installed at this location.').'</p>

		</body>

</html>';

		die($code);

	}
		
	/////////////////////////
	
	function getDynamicConfiguration(){
	
		$conf = array();
	
		$conf['admin']['max_upload_size'] = '5242880';
		$conf['symphony']['pagination_maximum_rows'] = '17';
		$conf['symphony']['allow_page_subscription'] = '1';
		$conf['symphony']['lang'] = 'en';
		$conf['symphony']['version'] = '2.0.3';
		$conf['log']['archive'] = '1';
		$conf['log']['maxsize'] = '102400';
		$conf['general']['sitename'] = 'Symphony CMS';
		$conf['image']['cache'] = '1';
		$conf['image']['quality'] = '90';
		$conf['database']['driver'] = 'mysql';
		$conf['database']['character_set'] = 'utf8';
		$conf['database']['character_encoding'] = 'utf8';
		$conf['database']['runtime_character_set_alter'] = '1';
		$conf['database']['disable_query_caching'] = 'no';
		$conf['public']['display_event_xml_in_source'] = 'yes';
		$conf['region']['time_format'] = 'H:i';
		$conf['region']['date_format'] = 'd F Y';
		$conf['maintenance_mode']['enabled'] = 'no';
	
		return $conf;
	
	}	
	
	function getTableSchema(){
		$sql = <<<SQL

		DQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2F1dGhvcnNgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9hdXRob3JzYDsNCkNSRUFURSBUQUJMRSBgdGJsX2F1dGhvcnNgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYHVzZXJuYW1lYCB2YXJjaGFyKDIwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICcnLAogIGBwYXNzd29yZGAgdmFyY2hhcigzMikgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnJywKICBgZmlyc3RfbmFtZWAgdmFyY2hhcigxMDApIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgbGFzdF9uYW1lYCB2YXJjaGFyKDEwMCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBlbWFpbGAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgbGFzdF9zZWVuYCBkYXRldGltZSBkZWZhdWx0ICcwMDAwLTAwLTAwIDAwOjAwOjAwJywKICBgdXNlcl90eXBlYCBlbnVtKCdhdXRob3InLCdkZXZlbG9wZXInKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdhdXRob3InLAogIGBwcmltYXJ5YCBlbnVtKCd5ZXMnLCdubycpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMIGRlZmF1bHQgJ25vJywKICBgZGVmYXVsdF9zZWN0aW9uYCBpbnQoMTEpIE5PVCBOVUxMLAogIGBhdXRoX3Rva2VuX2FjdGl2ZWAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdubycsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBVTklRVUUgS0VZIGB1c2VybmFtZWAgKGB1c2VybmFtZWApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfY2FjaGVgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9jYWNoZWA7DQpDUkVBVEUgVEFCTEUgYHRibF9jYWNoZWAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgaGFzaGAgdmFyY2hhcigzMikgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnJywKICBgY3JlYXRpb25gIGludCgxNCkgTk9UIE5VTEwgZGVmYXVsdCAnMCcsCiAgYGV4cGlyeWAgaW50KDE0KSB1bnNpZ25lZCBkZWZhdWx0IE5VTEwsCiAgYGRhdGFgIGxvbmd0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBjcmVhdGlvbmAgKGBjcmVhdGlvbmApLAogIEtFWSBgaGFzaGAgKGBoYXNoYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9lbnRyaWVzYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc2A7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBzZWN0aW9uX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBhdXRob3JfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGNyZWF0aW9uX2RhdGVgIGRhdGV0aW1lIE5PVCBOVUxMLAogIGBjcmVhdGlvbl9kYXRlX2dtdGAgZGF0ZXRpbWUgTk9UIE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYHNlY3Rpb25faWRgIChgc2VjdGlvbl9pZGApLAogIEtFWSBgYXV0aG9yX2lkYCAoYGF1dGhvcl9pZGApLAogIEtFWSBgY3JlYXRpb25fZGF0ZWAgKGBjcmVhdGlvbl9kYXRlYCksCiAgS0VZIGBjcmVhdGlvbl9kYXRlX2dtdGAgKGBjcmVhdGlvbl9kYXRlX2dtdGApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZXh0ZW5zaW9uc2AgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2V4dGVuc2lvbnNgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZXh0ZW5zaW9uc2AgKAogIGBpZGAgaW50KDExKSBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgbmFtZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMIGRlZmF1bHQgJycsCiAgYHN0YXR1c2AgZW51bSgnZW5hYmxlZCcsJ2Rpc2FibGVkJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnZW5hYmxlZCcsCiAgYHZlcnNpb25gIGRvdWJsZSB1bnNpZ25lZCBOT1QgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgbmFtZWAgKGBuYW1lYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2V4dGVuc2lvbnNfZGVsZWdhdGVzYDsNCkNSRUFURSBUQUJMRSBgdGJsX2V4dGVuc2lvbnNfZGVsZWdhdGVzYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBleHRlbnNpb25faWRgIGludCgxMSkgTk9UIE5VTEwsCiAgYHBhZ2VgIHZhcmNoYXIoMTAwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBgZGVsZWdhdGVgIHZhcmNoYXIoMTAwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBgY2FsbGJhY2tgIHZhcmNoYXIoMTAwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZXh0ZW5zaW9uX2lkYCAoYGV4dGVuc2lvbl9pZGApLAogIEtFWSBgcGFnZWAgKGBwYWdlYCksCiAgS0VZIGBkZWxlZ2F0ZWAgKGBkZWxlZ2F0ZWApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZmllbGRzYDsNCkNSRUFURSBUQUJMRSBgdGJsX2ZpZWxkc2AgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgbGFiZWxgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBgZWxlbWVudF9uYW1lYCB2YXJjaGFyKDUwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBgdHlwZWAgdmFyY2hhcigzMikgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgYHBhcmVudF9zZWN0aW9uYCBpbnQoMTEpIE5PVCBOVUxMIGRlZmF1bHQgJzAnLAogIGByZXF1aXJlZGAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICd5ZXMnLAogIGBzb3J0b3JkZXJgIGludCgxMSkgTk9UIE5VTEwgZGVmYXVsdCAnMScsCiAgYGxvY2F0aW9uYCBlbnVtKCdtYWluJywnc2lkZWJhcicpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMIGRlZmF1bHQgJ21haW4nLAogIGBzaG93X2NvbHVtbmAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdubycsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGluZGV4YCAoYGVsZW1lbnRfbmFtZWAsYHR5cGVgLGBwYXJlbnRfc2VjdGlvbmApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzX2F1dGhvcmAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2ZpZWxkc19hdXRob3JgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX2F1dGhvcmAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGFsbG93X2F1dGhvcl9jaGFuZ2VgIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgYGFsbG93X211bHRpcGxlX3NlbGVjdGlvbmAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdubycsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBVTklRVUUgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzX2NoZWNrYm94YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZmllbGRzX2NoZWNrYm94YDsNCkNSRUFURSBUQUJMRSBgdGJsX2ZpZWxkc19jaGVja2JveGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGRlZmF1bHRfc3RhdGVgIGVudW0oJ29uJywnb2ZmJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnb24nLAogIGBkZXNjcmlwdGlvbmAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZmllbGRfaWRgIChgZmllbGRfaWRgKQopIEVOR0lORT1NeUlTQU0gIERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2ZpZWxkc19kYXRlYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZmllbGRzX2RhdGVgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX2RhdGVgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBwcmVfcG9wdWxhdGVgIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIGBjYWxlbmRhcmAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdubycsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGZpZWxkX2lkYCAoYGZpZWxkX2lkYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9maWVsZHNfaW5wdXRgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9maWVsZHNfaW5wdXRgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX2lucHV0YCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBmaWVsZF9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgdmFsaWRhdG9yYCB2YXJjaGFyKDEwMCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzX3NlbGVjdGAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2ZpZWxkc19zZWxlY3RgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX3NlbGVjdGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGFsbG93X211bHRpcGxlX3NlbGVjdGlvbmAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdubycsCiAgYHN0YXRpY19vcHRpb25zYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIGBkeW5hbWljX29wdGlvbnNgIGludCgxMSkgdW5zaWduZWQgZGVmYXVsdCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApCikgRU5HSU5FPU15SVNBTSAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzX3RhZ2xpc3RgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9maWVsZHNfdGFnbGlzdGA7DQpDUkVBVEUgVEFCTEUgYHRibF9maWVsZHNfdGFnbGlzdGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHZhbGlkYXRvcmAgdmFyY2hhcigxMDApIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgcHJlX3BvcHVsYXRlX3NvdXJjZWAgdmFyY2hhcigxNSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApLAogIEtFWSBgcHJlX3BvcHVsYXRlX3NvdXJjZWAgKGBwcmVfcG9wdWxhdGVfc291cmNlYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9maWVsZHNfdGV4dGFyZWFgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9maWVsZHNfdGV4dGFyZWFgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX3RleHRhcmVhYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBmaWVsZF9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgZm9ybWF0dGVyYCB2YXJjaGFyKDEwMCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBzaXplYCBpbnQoMykgdW5zaWduZWQgTk9UIE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGZpZWxkX2lkYCAoYGZpZWxkX2lkYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9maWVsZHNfdXBsb2FkYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZmllbGRzX3VwbG9hZGA7DQpDUkVBVEUgVEFCTEUgYHRibF9maWVsZHNfdXBsb2FkYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBmaWVsZF9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgZGVzdGluYXRpb25gIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBgdmFsaWRhdG9yYCB2YXJjaGFyKDUwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGZpZWxkX2lkYCAoYGZpZWxkX2lkYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9mb3Jnb3RwYXNzYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZm9yZ290cGFzc2A7DQpDUkVBVEUgVEFCTEUgYHRibF9mb3Jnb3RwYXNzYCAoCiAgYGF1dGhvcl9pZGAgaW50KDExKSBOT1QgTlVMTCBkZWZhdWx0ICcwJywKICBgdG9rZW5gIHZhcmNoYXIoNikgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgYGV4cGlyeWAgdmFyY2hhcigyNSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgYXV0aG9yX2lkYCkKKSBFTkdJTkU9TXlJU0FNIERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX3BhZ2VzYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfcGFnZXNgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfcGFnZXNgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYHBhcmVudGAgaW50KDExKSBkZWZhdWx0IE5VTEwsCiAgYHRpdGxlYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnJywKICBgaGFuZGxlYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBwYXRoYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBwYXJhbXNgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgYGRhdGFfc291cmNlc2AgdGV4dCBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSwKICBgZXZlbnRzYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIGBzb3J0b3JkZXJgIGludCgxMSkgTk9UIE5VTEwgZGVmYXVsdCAnMCcsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYHBhcmVudGAgKGBwYXJlbnRgKQopIEVOR0lORT1NeUlTQU0gIERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX3BhZ2VzX3R5cGVzYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfcGFnZXNfdHlwZXNgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfcGFnZXNfdHlwZXNgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYHBhZ2VfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHR5cGVgIHZhcmNoYXIoNTApIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBwYWdlX2lkYCAoYHBhZ2VfaWRgLGB0eXBlYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9zZWN0aW9uc2AgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX3NlY3Rpb25zYDsNCkNSRUFURSBUQUJMRSBgdGJsX3NlY3Rpb25zYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBuYW1lYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnJywKICBgaGFuZGxlYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgYHNvcnRvcmRlcmAgaW50KDExKSBOT1QgTlVMTCBkZWZhdWx0ICcwJywKICBgZW50cnlfb3JkZXJgIHZhcmNoYXIoNykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBlbnRyeV9vcmRlcl9kaXJlY3Rpb25gIGVudW0oJ2FzYycsJ2Rlc2MnKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0ICdhc2MnLAogIGBoaWRkZW5gIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIGBuYXZpZ2F0aW9uX2dyb3VwYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnQ29udGVudCcsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBVTklRVUUgS0VZIGBoYW5kbGVgIChgaGFuZGxlYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9zZWN0aW9uc19hc3NvY2lhdGlvbmAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX3NlY3Rpb25zX2Fzc29jaWF0aW9uYDsNCkNSRUFURSBUQUJMRSBgdGJsX3NlY3Rpb25zX2Fzc29jaWF0aW9uYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBwYXJlbnRfc2VjdGlvbl9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgcGFyZW50X3NlY3Rpb25fZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgZGVmYXVsdCBOVUxMLAogIGBjaGlsZF9zZWN0aW9uX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBjaGlsZF9zZWN0aW9uX2ZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBjYXNjYWRpbmdfZGVsZXRpb25gIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBwYXJlbnRfc2VjdGlvbl9pZGAgKGBwYXJlbnRfc2VjdGlvbl9pZGAsYGNoaWxkX3NlY3Rpb25faWRgLGBjaGlsZF9zZWN0aW9uX2ZpZWxkX2lkYCkKKSBFTkdJTkU9TXlJU0FNICBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg==

SQL;

		return base64_decode(trim($sql));

	}

	function getWorkspaceData(){
		$sql = <<<SQL

		

SQL;

		return base64_decode(trim($sql));

	}
		
	define('INSTALL_REQUIREMENTS_PASSED', true);
	include_once('./symphony/lib/toolkit/include.install.php');

